var simpleMazeApp = function (d) {
    "use strict";

    /* Key options:
     * ArrowUp, ArrowRight, ArrowLeft, ArrowDown
     * 8 (up), 6 (right), 4 (left), 2 (down)
     * u (up), k (right), h (left), n (down)
     * action: spacebar */

    var model = {
        htmlTargets: d.targets,
        actionKeys: {
            up: ["ArrowUp", "8", "u"],
            down: ["ArrowDown", "2", "n"],
            left: ["ArrowLeft", "4", "h"],
            right: ["ArrowRight", "6", "k"],
            action: 32 // spacebar
        },
        pos: {
            current: [375, 0], // x, y
            previous: [375, 0] // default
        },
        incr: 25,
        win: [525, 750],
        map: [[375, -25], [0, 0], [25, 0], [50, 0], [75, 0], [100, 0], [125, 0], [150, 0], [175, 0], [200, 0], [225, 0], [250, 0], [275, 0], [300, 0], [325, 0], [350, 0], [400, 0], [425, 0], [450, 0], [475, 0], [500, 0], [525, 0], [550, 0], [575, 0], [600, 0], [625, 0], [650, 0], [675, 0], [700, 0], [725, 0], [750, 0], [0, 25], [50, 25], [500, 25], [750, 25], [0, 50], [50, 50], [100, 50], [125, 50], [150, 50], [175, 50], [200, 50], [225, 50], [250, 50], [275, 50], [300, 50], [325, 50], [350, 50], [400, 50], [425, 50], [450, 50], [500, 50], [550, 50], [575, 50], [600, 50], [625, 50], [650, 50], [700, 50], [750, 50], [0, 75], [50, 75], [100, 75], [250, 75], [400, 75], [500, 75], [650, 75], [700, 75], [750, 75], [0, 100], [50, 100], [100, 100], [150, 100], [175, 100], [200, 100], [250, 100], [300, 100], [325, 100], [350, 100], [375, 100], [400, 100], [425, 100], [450, 100], [500, 100], [525, 100], [550, 100], [575, 100], [600, 100], [650, 100], [700, 100], [750, 100], [0, 125], [100, 125], [150, 125], [250, 125], [450, 125], [500, 125], [600, 125], [650, 125], [700, 125], [750, 125], [0, 150], [50, 150], [75, 150], [100, 150], [150, 150], [200, 150], [225, 150], [250, 150], [300, 150], [325, 150], [350, 150], [375, 150], [400, 150], [450, 150], [475, 150], [500, 150], [550, 150], [600, 150], [650, 150], [700, 150], [750, 150], [0, 175], [100, 175], [150, 175], [200, 175], [400, 175], [450, 175], [550, 175], [650, 175], [700, 175], [750, 175], [0, 200], [25, 200], [50, 200], [100, 200], [150, 200], [200, 200], [225, 200], [250, 200], [275, 200], [300, 200], [325, 200], [350, 200], [375, 200], [400, 200], [450, 200], [500, 200], [525, 200], [550, 200], [575, 200], [600, 200], [625, 200], [650, 200], [700, 200], [750, 200], [0, 225], [50, 225], [100, 225], [150, 225], [450, 225], [600, 225], [650, 225], [700, 225], [750, 225], [0, 250], [50, 250], [100, 250], [150, 250], [175, 250], [200, 250], [225, 250], [250, 250], [275, 250], [300, 250], [350, 250], [375, 250], [400, 250], [425, 250], [450, 250], [475, 250], [500, 250], [525, 250], [550, 250], [600, 250], [650, 250], [700, 250], [725, 250], [750, 250], [0, 275], [100, 275], [250, 275], [300, 275], [350, 275], [450, 275], [650, 275], [750, 275], [0, 300], [50, 300], [75, 300], [100, 300], [125, 300], [150, 300], [200, 300], [250, 300], [300, 300], [350, 300], [400, 300], [450, 300], [500, 300], [525, 300], [550, 300], [575, 300], [600, 300], [625, 300], [650, 300], [675, 300], [700, 300], [750, 300], [0, 325], [50, 325], [100, 325], [150, 325], [200, 325], [250, 325], [350, 325], [400, 325], [550, 325], [700, 325], [750, 325], [0, 350], [50, 350], [100, 350], [150, 350], [200, 350], [250, 350], [275, 350], [300, 350], [325, 350], [350, 350], [400, 350], [425, 350], [450, 350], [475, 350], [500, 350], [525, 350], [550, 350], [600, 350], [625, 350], [650, 350], [700, 350], [750, 350], [0, 375], [100, 375], [150, 375], [200, 375], [400, 375], [550, 375], [600, 375], [700, 375], [750, 375], [0, 400], [25, 400], [50, 400], [75, 400], [100, 400], [150, 400], [200, 400], [225, 400], [250, 400], [275, 400], [300, 400], [325, 400], [350, 400], [375, 400], [400, 400], [450, 400], [475, 400], [500, 400], [550, 400], [600, 400], [650, 400], [675, 400], [700, 400], [750, 400], [0, 425], [150, 425], [200, 425], [400, 425], [450, 425], [550, 425], [600, 425], [750, 425], [0, 450], [50, 450], [75, 450], [100, 450], [125, 450], [150, 450], [200, 450], [250, 450], [275, 450], [300, 450], [325, 450], [350, 450], [400, 450], [450, 450], [500, 450], [525, 450], [550, 450], [600, 450], [625, 450], [650, 450], [675, 450], [700, 450], [750, 450], [0, 475], [50, 475], [200, 475], [300, 475], [400, 475], [450, 475], [600, 475], [700, 475], [750, 475], [0, 500], [50, 500], [75, 500], [100, 500], [125, 500], [150, 500], [175, 500], [200, 500], [225, 500], [250, 500], [300, 500], [350, 500], [375, 500], [400, 500], [450, 500], [475, 500], [500, 500], [525, 500], [550, 500], [575, 500], [600, 500], [650, 500], [700, 500], [750, 500], [0, 525], [50, 525], [300, 525], [400, 525], [500, 525], [650, 525], [700, 525], [750, 525], [0, 550], [50, 550], [100, 550], [125, 550], [150, 550], [175, 550], [200, 550], [225, 550], [250, 550], [275, 550], [300, 550], [325, 550], [350, 550], [400, 550], [425, 550], [450, 550], [500, 550], [550, 550], [575, 550], [600, 550], [625, 550], [650, 550], [700, 550], [750, 550], [0, 575], [50, 575], [150, 575], [350, 575], [450, 575], [500, 575], [650, 575], [700, 575], [750, 575], [0, 600], [50, 600], [75, 600], [100, 600], [150, 600], [200, 600], [225, 600], [250, 600], [275, 600], [300, 600], [350, 600], [375, 600], [400, 600], [450, 600], [500, 600], [550, 600], [575, 600], [600, 600], [650, 600], [675, 600], [700, 600], [750, 600], [0, 625], [150, 625], [200, 625], [300, 625], [400, 625], [500, 625], [550, 625], [600, 625], [750, 625], [0, 650], [25, 650], [50, 650], [75, 650], [100, 650], [125, 650], [150, 650], [200, 650], [250, 650], [300, 650], [350, 650], [400, 650], [425, 650], [450, 650], [475, 650], [500, 650], [550, 650], [600, 650], [625, 650], [650, 650], [675, 650], [700, 650], [725, 650], [750, 650], [0, 675], [50, 675], [200, 675], [250, 675], [300, 675], [350, 675], [500, 675], [550, 675], [700, 675], [750, 675], [0, 700], [50, 700], [100, 700], [125, 700], [150, 700], [175, 700], [200, 700], [250, 700], [300, 700], [350, 700], [375, 700], [400, 700], [425, 700], [450, 700], [475, 700], [500, 700], [550, 700], [600, 700], [625, 700], [650, 700], [700, 700], [750, 700], [0, 725], [250, 725], [300, 725], [600, 725], [750, 725], [0, 750], [25, 750], [50, 750], [75, 750], [100, 750], [125, 750], [150, 750], [175, 750], [200, 750], [225, 750], [250, 750], [275, 750], [300, 750], [325, 750], [350, 750], [375, 750], [400, 750], [425, 750], [450, 750], [475, 750], [500, 750], [550, 750], [575, 750], [600, 750], [625, 750], [650, 750], [675, 750], [700, 750], [725, 750], [750, 750], [525, 775]]
    };

    function checkMap(pos) {
        // Takes in the pos <array>.
        // Returns true if the
        // position is on a map
        // line; false if not.
        const map = model.map;
        var index = 0;
        var len = map.length;
        var inMap = true;

        while (index < len) {
            if (pos[0] === map[index][0] && pos[1] === map[index][1]) {
                // the pointer is on a perimeter
                inMap = false;
                break;
            }
            index += 1;
        }
        return inMap;
    }

    function movePointer(k) {
        // Takes in the key hit <array>.
        // Returns the new position <array>.
        const incr = model.incr;
        var keyName = k[0];
        var keyCode = k[1];
        var x = model.pos.current[0];
        var y = model.pos.current[1];
        var pos = {
            current: [x, y],
            previous: model.pos.previous
        };

        pos.previous = [x, y];

        if (model.actionKeys.up.indexOf(keyName) > -1) {
            y -= incr; // up
        } else if (model.actionKeys.right.indexOf(keyName) > -1) {
            x += incr; // right
        } else if (model.actionKeys.left.indexOf(keyName) > -1) {
            x -= incr; // left
        } else if (model.actionKeys.down.indexOf(keyName) > -1) {
            y += incr; // down
        } else {
            if (keyCode === model.actionKeys.action) {
                // action
                console.log("action");
            }
        }

        pos.current = [x, y];

        // check to see if move is valid before
        // updating the actual position of the pointer
        if (checkMap(pos.current) === false) {
            // revert
            pos.current = pos.previous;
            pos.previous = model.pos.previous;
        }
        return pos;
    }

    // view
    function renderPointer(pos) {
        var pointerEl = model.htmlTargets.pointer;
        pointerEl.style.left = pos[0].toString() + "px";
        pointerEl.style.top = pos[1].toString() + "px";
    }

    // controller
    function main(m) {
        renderPointer(m.pos.current);

        document.addEventListener("keydown", function (item) {
            var keyHit = [item.key, item.keyCode];
            var pos = movePointer(keyHit);

            model.pos.current = pos.current;
            model.pos.previous = pos.previous;

            renderPointer(m.pos.current);

            console.log(model.pos.current);
        });
    }
    main(model);
};
simpleMazeApp(data);